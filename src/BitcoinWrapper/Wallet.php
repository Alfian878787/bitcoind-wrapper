<?php

namespace BitcoinWrapper;

/**
 * Class Wallet
 * All methods within requires wallet support in the bitcoin daemon
 * @package BitcoinWrapper
 */
class Wallet extends AbstractRpc
{

    /**
     * The backupWallet RPC safely copies wallet.dat to the specified file,
     * which can be a directory or a path with filename.
     *
     * @param $destination - destination directory or filename
     * @return null - Always null whether success or failure.
     */
    public function backupWallet($destination)
    {
        return $this->client->send('backupwallet', $destination);
    }

    /**
     * * * Requires an unlocked wallet or an unencrypted wallet.
     * The dumpWallet RPC creates or overwrites a file with all wallet keys in a human-readable format.
     * @param $fileName
     * @return null
     */
    public function dumpWallet($fileName)
    {
        return $this->client->send('dumpwallet', $fileName);
    }

    /**
     * The getAccount RPC returns the name of the account associated with the given address.
     *
     * @param $address
     * @return mixed
     */
    public function getAccount($address = "")
    {
        return $this->client->send('getaccount', $address);
    }

    /**
     * The getAccountAddress RPC returns the current Bitcoin address for receiving payments to this account.
     * If the account doesn’t exist, it creates both the account and a new address for receiving payment.
     * Once a payment has been received to an address, future calls to this RPC
     * for the same account will return a different address.
     *
     * @will-be-removed in a later version of Bitcoin Core.
     *
     * @param string $accountName
     * @return mixed
     */
    public function getAccountAddress($accountName = "")
    {
        return $this->client->send('getaccountaddress', $accountName);
    }

    /**
     * The getReceivedByAccount RPC returns the total amount received by addresses in a particular account
     * from transactions with the specified number of confirmations. It does not count coinbase transactions.
     *
     * @will-be-removed in a later version of Bitcoin Core.
     *
     * @param string $accountName
     * @param int $confirmations - the minimum number of confirmations
     * @return float - number of bitcoins received
     */
    public function getReceivedByAccount($accountName, $confirmations = 0)
    {
        return $this->client->send('getreceivedbyaccount', [$accountName, $confirmations]);
    }

    /**
     * The getReceivedByAddress RPC returns the total amount received by the specified address
     * in transactions with the specified number of confirmations.
     * It does not count coinbase transactions.
     **
     * @param string $address
     * @param int $confirmations - the minimum number of confirmations
     * @return float - number of bitcoins received
     */
    public function getReceivedByAddress($address, $confirmations = 0)
    {
        return $this->client->send('getreceivedbyaddress', [$address, $confirmations]);
    }

    /**
     * The getUnconfirmedBalance RPC returns the wallet’s total unconfirmed balance.
     *
     * @return float - the balance of unconfirmed transactions paying this wallet
     */
    public function getUnconfirmedBalance()
    {
        return $this->client->send('getunconfirmedbalance');
    }

    /**
     * The getWalletInfo RPC provides information about the wallet.
     * @return object - information about the wallet
     */
    public function getWalletInfo()
    {
        return $this->decodeFromJson($this->client->send('getwalletinfo'));
    }

    /**
     * * * Requires an unlocked wallet or an unencrypted wallet.
     * The keyPoolRefill RPC fills the cache of unused pre-generated keys (the keypool).
     *
     * @param int $keyPoolSize - The new size of the keypool;
     * if the number of keys in the keypool is less than this number,
     * new keys will be generated. Default is 100. The value 0 also equals the default.
     * The value specified is for this call only—the default keypool size is not changed
     *
     * @return null - on success
     */
    public function keyPoolRefill($keyPoolSize = 100)
    {
        return $this->decodeFromJson($this->client->send('keypoolrefill', $keyPoolSize));
    }

    /**
     * The listaccounts RPC lists accounts and their balances.
     *
     * @will-be-removed in a later version of Bitcoin Core
     *
     * @param int $confirmations - The minimum number of confirmations an externally-generated
     * transaction must have before it is counted towards the balance.
     * Transactions generated by this node are counted immediately.
     * Typically, externally-generated transactions are payments to this wallet and transactions
     * generated by this node are payments to other wallets.
     * Use 0 to count unconfirmed transactions. Default is 1
     *
     * @param bool $includeWatchOnly - If set to true, include watch-only addresses in details
     * and calculations as if they were regular addresses belonging to the wallet.
     * If set to false (the default), treat watch-only addresses
     * as if they didn’t belong to this wallet
     *
     * @return object - a list of accounts and their balances
     * The name of an account as a string paired with the balance of the account as a number of bitcoins.
     * The number of bitcoins may be negative if the account has spent more bitcoins than it received.
     * Accounts with zero balances and zero transactions will be displayed
     */
    public function listAccounts($confirmations = 1, $includeWatchOnly = false)
    {
        return $this->decodeFromJson($this->client->send('listaccounts', [$confirmations, $includeWatchOnly]));
    }

    /**
     * The listReceivedByAddress RPC lists the total number of bitcoins received by each address.
     * https://bitcoin.org/en/developer-reference#listreceivedbyaddress
     *
     * @param int $confirmations - the minimum number of confirmations a transaction must have to be counted.
     * The minimum number of confirmations an externally-generated transaction must have before it is
     * counted towards the balance. Transactions generated by this node are counted immediately.
     * Typically, externally-generated transactions are payments to this wallet and
     * transactions generated by this node are payments to other wallets.
     * Use 0 to count unconfirmed transactions. Default is 1
     *
     * @param bool $includeEmpty - whether to include empty accounts.
     * Set to true to display accounts which have never received a payment. Set to false (the default)
     * to only include accounts which have received a payment. Any account which has
     * received a payment will be displayed even if its current balance is 0
     *
     * @param bool $includeWatchOnly - whether to include watch-only addresses in results.
     * If set to true, include watch-only addresses in details and calculations as if they were
     * regular addresses belonging to the wallet. If set to false (the default),
     * treat watch-only addresses as if they didn’t belong to this wallet
     *
     * @return object - addresses, account names, balances, and minimum confirmations
     */
    public function listReceivedByAddress($confirmations = 1, $includeEmpty = false, $includeWatchOnly = false)
    {
        return $this->decodeFromJson($this->client->send('listreceivedbyaddress', [$confirmations, $includeEmpty, $includeWatchOnly]));
    }
}